{
  "item": [
    {
      "id": "d0935758-6d52-43a7-bc70-4bdc082f5a2f",
      "name": "kafka/v3/clusters/{cluster_id}/topics",
      "item": [
        {
          "id": "15caa138-08f2-4d69-857a-0fc2b9bee015",
          "name": "List Topics",
          "request": {
            "name": "List Topics",
            "description": {
              "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nReturn the list of topics that belong to the specified Kafka cluster.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "kafka",
                "v3",
                "clusters",
                ":cluster_id",
                "topics"
              ],
              "host": [
                "{{kafka-v3-clusters-cluster_id-topics-Url}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{cluster_id}}",
                  "key": "cluster_id",
                  "description": "(Required) The Kafka cluster ID."
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "{{basicAuthUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{basicAuthPassword}}"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8e645b29-1b78-4bb8-8949-2613ddeacaeb",
              "name": "The list of topics.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"kind\": \"KafkaTopicList\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\",\n    \"next\": null\n  },\n  \"data\": [\n    {\n      \"kind\": \"KafkaTopic\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-1\",\n      \"is_internal\": false,\n      \"replication_factor\": 3,\n      \"partitions_count\": 1,\n      \"partitions\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\n      },\n      \"configs\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\n      },\n      \"partition_reassignments\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments\"\n      }\n    },\n    {\n      \"kind\": \"KafkaTopic\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-2\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-2\",\n      \"is_internal\": true,\n      \"replication_factor\": 4,\n      \"partitions_count\": 1,\n      \"partitions\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions\"\n      },\n      \"configs\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs\"\n      },\n      \"partition_reassignments\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments\"\n      }\n    },\n    {\n      \"kind\": \"KafkaTopic\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-3\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-3\",\n      \"is_internal\": false,\n      \"replication_factor\": 5,\n      \"partitions_count\": 1,\n      \"partitions\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions\"\n      },\n      \"configs\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs\"\n      },\n      \"partition_reassignments\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments\"\n      }\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e3536623-129a-4c14-aea5-15f863d1635f",
              "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `java.lang.Integer` from String \\\"A\\\": not a valid `java.lang.Integer` value\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "55789ac5-2731-4b28-b7e8-ea982fdef38a",
              "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a4c715ac-5d59-4366-81fb-f210fb4af9cb",
              "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e1e2e1d5-75f9-45f3-be01-52c184afa24d",
              "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e2fec06a-e493-42bb-a70f-46676b68a574",
              "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The list of topics.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.next` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.next`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.next`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.next`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n                if(pm.expect(ld.get(pm.response.json(), `data`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6ad708a9-a590-437d-83b7-069f9c030f7f",
          "name": "Create Topic",
          "request": {
            "name": "Create Topic",
            "description": {
              "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nCreate a topic.\nAlso supports a dry-run mode that only validates whether the topic creation would succeed\nif the ``validate_only`` request property is explicitly specified and set to true. Note that\nwhen dry-run mode is being used the response status would be 200 OK instead of 201 Created.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "kafka",
                "v3",
                "clusters",
                ":cluster_id",
                "topics"
              ],
              "host": [
                "{{kafka-v3-clusters-cluster_id-topics-Url}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{cluster_id}}",
                  "key": "cluster_id",
                  "description": "(Required) The Kafka cluster ID."
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "{{basicAuthUsername}}"
                },
                {
                  "key": "password",
                  "value": "{{basicAuthPassword}}"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"topic_name\": \"{{topic_name}}\",\n    \"partitions_count\": \"{{partitions_count}}\",\n    \"replication_factor\": \"{{replication_factor}}\",\n    \"configs\": [\n        \"{{configs}}\"\n    ],\n    \"validate_only\": \"{{validate_only}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d267a70e-c641-4017-a5af-6fc32927557a",
              "name": "The created topic.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"kind\": \"KafkaTopic\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X\",\n    \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-X\"\n  },\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-X\",\n  \"is_internal\": false,\n  \"replication_factor\": 3,\n  \"partitions_count\": 1,\n  \"partitions\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions\"\n  },\n  \"configs\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs\"\n  },\n  \"partition_reassignments\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a750329d-7588-4e2f-b4ba-05c4d3cacc00",
              "name": "The created topic.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"kind\": \"KafkaTopic\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X\",\n    \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-X\"\n  },\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-X\",\n  \"is_internal\": false,\n  \"replication_factor\": 3,\n  \"partitions_count\": 1,\n  \"partitions\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions\"\n  },\n  \"configs\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs\"\n  },\n  \"partition_reassignments\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments\"\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a26a2727-0ef8-45f3-a6cc-d3243ee6230d",
              "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 40002,\n  \"message\": \"Topic 'my-topic' already exists.\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8ab18181-021a-4d13-900b-c5a4ca435e15",
              "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "14724ab3-2b30-4737-a496-1451970c20ca",
              "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "58b952d4-9e76-48f9-af79-fe8d94483fdb",
              "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "text/html"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Too Many Requests",
              "code": 429,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "af3516f6-cfec-4126-85e2-344e4524a103",
              "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
              "originalRequest": {
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: basic",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The created topic.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.resource_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.resource_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.resource_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.resource_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cluster_id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cluster_id`)){\n                if(pm.expect(ld.get(pm.response.json(), `cluster_id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cluster_id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `topic_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`topic_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `topic_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `topic_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `is_internal` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`is_internal`)){\n                if(pm.expect(ld.get(pm.response.json(), `is_internal`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `is_internal`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `replication_factor` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`replication_factor`)){\n                if(pm.expect(ld.get(responseData, `replication_factor`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `replication_factor`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions_count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`partitions_count`)){\n                if(pm.expect(ld.get(responseData, `partitions_count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `partitions_count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `authorized_operations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorized_operations`)){\n                if(pm.expect(ld.get(pm.response.json(), `authorized_operations`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `authorized_operations`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 201){\n    pm.test(\"The created topic.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Created\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.resource_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.resource_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.resource_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.resource_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cluster_id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cluster_id`)){\n                if(pm.expect(ld.get(pm.response.json(), `cluster_id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cluster_id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `topic_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`topic_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `topic_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `topic_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `is_internal` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`is_internal`)){\n                if(pm.expect(ld.get(pm.response.json(), `is_internal`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `is_internal`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `replication_factor` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`replication_factor`)){\n                if(pm.expect(ld.get(responseData, `replication_factor`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `replication_factor`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions_count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`partitions_count`)){\n                if(pm.expect(ld.get(responseData, `partitions_count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `partitions_count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `authorized_operations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorized_operations`)){\n                if(pm.expect(ld.get(pm.response.json(), `authorized_operations`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `authorized_operations`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ea90b97d-98ba-4341-90db-5e0721cee7fd",
          "name": "{topic_name}",
          "item": [
            {
              "id": "586d10c5-856e-474e-8080-2b6132551747",
              "name": "Get Topic",
              "request": {
                "name": "Get Topic",
                "description": {
                  "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nReturn the topic with the given `topic_name`.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics",
                    ":topic_name"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "include_authorized_operations",
                      "value": "{{include_authorized_operations}}",
                      "description": "Specify if authorized operations should be included in the response."
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    },
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{topic_name}}",
                      "key": "topic_name",
                      "description": "(Required) The topic name."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "username",
                      "value": "{{basicAuthUsername}}"
                    },
                    {
                      "key": "password",
                      "value": "{{basicAuthPassword}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "a9aac660-a78e-43f2-b77f-a0d40032c447",
                  "name": "The topic.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"kind\": \"KafkaTopic\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\",\n    \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1\"\n  },\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-1\",\n  \"is_internal\": false,\n  \"replication_factor\": 3,\n  \"partitions_count\": 1,\n  \"partitions\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\n  },\n  \"configs\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\n  },\n  \"partition_reassignments\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "34fb6cac-ef7b-4d97-a955-96aea1550bfb",
                  "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `java.lang.Integer` from String \\\"A\\\": not a valid `java.lang.Integer` value\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7ed6f01f-090b-4531-b679-10aa8bf2341f",
                  "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2b4fd007-d46a-4591-a5b3-becae9343936",
                  "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3fef9132-6b72-4e3d-92b2-0d84825ceead",
                  "name": "Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 404,\n  \"message\": \"HTTP 404 Not Found\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "845c1613-8761-4dd1-9e9e-6de638327334",
                  "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "text/html"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/html"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "8ae0791e-5aef-4b0d-b26b-81b8b5c5d380",
                  "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [
                        {
                          "key": "include_authorized_operations",
                          "value": "{{include_authorized_operations}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name?include_authorized_operations=<boolean> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The topic.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `kind` field',function(){\n            pm.expect(responseData.kind).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `metadata` field',function(){\n            pm.expect(responseData.metadata).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `cluster_id` field',function(){\n            pm.expect(responseData.cluster_id).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `topic_name` field',function(){\n            pm.expect(responseData.topic_name).to.exist.and.to.be.a(\"string\");\n          })\n\n          pm.test('Response has the `is_internal` field',function(){\n            pm.expect(responseData.is_internal).to.exist.and.to.be.a(\"boolean\");\n          })\n\n          pm.test('Response has the `replication_factor` field',function(){\n            pm.expect(responseData.replication_factor).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `partitions_count` field',function(){\n            pm.expect(responseData.partitions_count).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `partitions` field',function(){\n            pm.expect(responseData.partitions).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `configs` field',function(){\n            pm.expect(responseData.configs).to.exist.and.to.be.a(\"object\");\n          })\n\n          pm.test('Response has the `partition_reassignments` field',function(){\n            pm.expect(responseData.partition_reassignments).to.exist.and.to.be.a(\"object\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `error_code` field',function(){\n            pm.expect(responseData.error_code).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `message` field',function(){\n            pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `error_code` field',function(){\n            pm.expect(responseData.error_code).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `message` field',function(){\n            pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `error_code` field',function(){\n            pm.expect(responseData.error_code).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `message` field',function(){\n            pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 404){\n    pm.test(\"Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `error_code` field',function(){\n            pm.expect(responseData.error_code).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `message` field',function(){\n            pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n      });\n\n    }\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n          pm.response.to.have.header(\"Content-Type\");\n\n          pm.test('Response has the `error_code` field',function(){\n            pm.expect(responseData.error_code).to.exist.and.to.be.a(\"number\");\n          })\n\n          pm.test('Response has the `message` field',function(){\n            pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\n          })\n\n          });\n\n        }\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4246abc4-f2f4-4c1b-a879-fb028b105536",
              "name": "Update Partition Count",
              "request": {
                "name": "Update Partition Count",
                "description": {
                  "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nIncrease the number of partitions for a topic.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics",
                    ":topic_name"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    },
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{topic_name}}",
                      "key": "topic_name",
                      "description": "(Required) The topic name."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "username",
                      "value": "{{basicAuthUsername}}"
                    },
                    {
                      "key": "password",
                      "value": "{{basicAuthPassword}}"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "586563fe-ac3b-4c92-a387-072caa4b5a44",
                  "name": "The topic.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"kind\": \"KafkaTopic\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\",\n    \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1\"\n  },\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-1\",\n  \"is_internal\": false,\n  \"replication_factor\": 3,\n  \"partitions_count\": 1,\n  \"partitions\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\n  },\n  \"configs\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\n  },\n  \"partition_reassignments\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments\"\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "18a844c5-d45f-4e13-ab70-82a1a5d19096",
                  "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40002,\n  \"message\": \"Topic already has 1 partitions.\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "909ffe7a-20de-410a-beb3-29dcb6bc632c",
                  "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "36e2ed30-1391-446c-bedb-baf6d7e3bf43",
                  "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2496cd40-6d37-4aeb-a20b-46fd4d84b60f",
                  "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "text/html"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/html"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "f0e82419-60ed-49f9-85b6-afb72ef6c39c",
                  "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"partitions_count\": \"{{partitions_count}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The topic.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.resource_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.resource_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.resource_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.resource_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cluster_id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cluster_id`)){\n                if(pm.expect(ld.get(pm.response.json(), `cluster_id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cluster_id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `topic_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`topic_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `topic_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `topic_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `is_internal` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`is_internal`)){\n                if(pm.expect(ld.get(pm.response.json(), `is_internal`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `is_internal`, null)).to.equal(\"boolean\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `replication_factor` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`replication_factor`)){\n                if(pm.expect(ld.get(responseData, `replication_factor`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `replication_factor`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions_count` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`partitions_count`)){\n                if(pm.expect(ld.get(responseData, `partitions_count`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `partitions_count`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partitions.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partitions.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partitions.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partitions.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `configs.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`configs.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `configs.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `configs.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_reassignments.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`partition_reassignments.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `partition_reassignments.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `authorized_operations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorized_operations`)){\n                if(pm.expect(ld.get(pm.response.json(), `authorized_operations`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `authorized_operations`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "daf05aeb-286e-4a9e-a822-e9e549e6bb3d",
              "name": "Delete Topic",
              "request": {
                "name": "Delete Topic",
                "description": {
                  "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nDelete the topic with the given `topic_name`.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics",
                    ":topic_name"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    },
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{topic_name}}",
                      "key": "topic_name",
                      "description": "(Required) The topic name."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "username",
                      "value": "{{basicAuthUsername}}"
                    },
                    {
                      "key": "password",
                      "value": "{{basicAuthPassword}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "88734409-ba8e-4098-a042-df1877a62006",
                  "name": "No Content",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "8100ecc9-5c86-46c8-8b6e-2adf71b7d4c6",
                  "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `java.lang.Integer` from String \\\"A\\\": not a valid `java.lang.Integer` value\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3d2001fe-cea0-416a-8694-7ae0445fcb2c",
                  "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e1bc0996-3fae-4052-88a0-1831d185ab5c",
                  "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "51f2a8fb-721c-4e94-bedc-5c3693d62f41",
                  "name": "Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 404,\n  \"message\": \"HTTP 404 Not Found\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "981b65ae-08fd-40b7-9428-195d9da966fc",
                  "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "text/html"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/html"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "d40ae2ab-6295-427c-b9a1-a690eb2e751d",
                  "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 204){\n    pm.test(\"No Content\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"No Content\");\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9e323761-c4cc-4d7b-ad51-259cb84a81fb",
              "name": "partitions",
              "item": [
                {
                  "id": "bfde3322-c181-4d25-808f-ab848be4c3f9",
                  "name": "List Partitions",
                  "request": {
                    "name": "List Partitions",
                    "description": {
                      "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nReturn the list of partitions that belong to the specified topic.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "partitions"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "basic",
                      "basic": [
                        {
                          "key": "username",
                          "value": "{{basicAuthUsername}}"
                        },
                        {
                          "key": "password",
                          "value": "{{basicAuthPassword}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "64e583d6-48c7-4187-a4fe-44c523084eb8",
                      "name": "The list of partitions.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"kind\": \"KafkaPartitionList\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\",\n    \"next\": null\n  },\n  \"data\": [\n    {\n      \"kind\": \"KafkaPartition\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1/partition=1\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-1\",\n      \"partition_id\": 1,\n      \"leader\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1\"\n      },\n      \"replicas\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas\"\n      },\n      \"reassignment\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment\"\n      }\n    },\n    {\n      \"kind\": \"KafkaPartition\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1/partition=2\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-1\",\n      \"partition_id\": 2,\n      \"leader\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2\"\n      },\n      \"replicas\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas\"\n      },\n      \"reassignment\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment\"\n      }\n    },\n    {\n      \"kind\": \"KafkaPartition\",\n      \"metadata\": {\n        \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3\",\n        \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1/partition=3\"\n      },\n      \"cluster_id\": \"cluster-1\",\n      \"topic_name\": \"topic-1\",\n      \"partition_id\": 3,\n      \"leader\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3\"\n      },\n      \"replicas\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas\"\n      },\n      \"reassignment\": {\n        \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment\"\n      }\n    }\n  ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "49c84017-7927-4e21-ad74-82ea097b480c",
                      "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `java.lang.Integer` from String \\\"A\\\": not a valid `java.lang.Integer` value\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "6a704433-6a0d-4bd5-87bf-d96fb8b5a5c4",
                      "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "37493a56-5075-41fc-a99f-4b60a820aa56",
                      "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7295bce7-7c92-4fc1-9d8a-2b4b406e39fb",
                      "name": "Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 404,\n  \"message\": \"HTTP 404 Not Found\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "1ae3d862-ed4f-4730-8a30-aac466b96c04",
                      "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "text/html"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Too Many Requests",
                      "code": 429,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/html"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "55d7cf72-5280-45e1-82e2-d1bb85a95af0",
                      "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name/partitions for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The list of partitions.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.next` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.next`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.next`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.next`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n                if(pm.expect(ld.get(pm.response.json(), `data`)).to.exist){\n                  pm.expect(Array.isArray(ld.get(pm.response.json(), `data`))).to.equal(true);\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "1b490e9d-f318-4d1b-8ac6-6175f13d746b",
                  "name": "Get Partition",
                  "request": {
                    "name": "Get Partition",
                    "description": {
                      "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nReturn the partition with the given `partition_id`.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "partitions",
                        ":partition_id"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{partition_id}}",
                          "key": "partition_id",
                          "description": "(Required) The partition ID."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "basic",
                      "basic": [
                        {
                          "key": "username",
                          "value": "{{basicAuthUsername}}"
                        },
                        {
                          "key": "password",
                          "value": "{{basicAuthPassword}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "3aad7ac8-bae8-4547-8c16-11f592ee3562",
                      "name": "The partition",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"kind\": \"KafkaPartition\",\n  \"metadata\": {\n    \"self\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1\",\n    \"resource_name\": \"crn:///kafka=cluster-1/topic=topic-1/partition=1\"\n  },\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-1\",\n  \"partition_id\": 1,\n  \"leader\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1\"\n  },\n  \"replicas\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas\"\n  },\n  \"reassignment\": {\n    \"related\": \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment\"\n  }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "2d6cc8d9-2eec-4fb4-aad5-38ed1ca66e82",
                      "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `java.lang.Integer` from String \\\"A\\\": not a valid `java.lang.Integer` value\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "db091235-74d1-4eda-982d-dd16437487ec",
                      "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "037deb13-a8ab-41cf-be06-6b2a94f6c857",
                      "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "58206fc8-98b1-48f3-8d18-f530f1f76da5",
                      "name": "Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 404,\n  \"message\": \"HTTP 404 Not Found\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "96f93ef5-4e25-4ed1-b604-9ee6e4c2692a",
                      "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "text/html"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Too Many Requests",
                      "code": 429,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/html"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "956b7dbc-1d37-4d0d-a972-3895f136ce81",
                      "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "kafka",
                            "v3",
                            "clusters",
                            ":cluster_id",
                            "topics",
                            ":topic_name",
                            "partitions",
                            ":partition_id"
                          ],
                          "host": [
                            "{{kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{cluster_id}}",
                              "key": "cluster_id",
                              "description": "(Required) The Kafka cluster ID."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{topic_name}}",
                              "key": "topic_name",
                              "description": "(Required) The topic name."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{partition_id}}",
                              "key": "partition_id",
                              "description": "(Required) The partition ID."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: basic",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name/partitions/:partition_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The partition\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `kind` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`kind`)){\n                if(pm.expect(ld.get(pm.response.json(), `kind`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `kind`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.self` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.self`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.self`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.self`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `metadata.resource_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`metadata.resource_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `metadata.resource_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `metadata.resource_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cluster_id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cluster_id`)){\n                if(pm.expect(ld.get(pm.response.json(), `cluster_id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cluster_id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `topic_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`topic_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `topic_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `topic_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`partition_id`)){\n                if(pm.expect(ld.get(responseData, `partition_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `partition_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `leader` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`leader`)){\n                if(pm.expect(ld.get(pm.response.json(), `leader`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `leader`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `leader.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`leader.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `leader.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `leader.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `replicas` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`replicas`)){\n                if(pm.expect(ld.get(pm.response.json(), `replicas`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `replicas`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `replicas.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`replicas.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `replicas.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `replicas.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reassignment` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reassignment`)){\n                if(pm.expect(ld.get(pm.response.json(), `reassignment`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reassignment`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `reassignment.related` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`reassignment.related`)){\n                if(pm.expect(ld.get(pm.response.json(), `reassignment.related`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `reassignment.related`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                }
              ],
              "event": []
            },
            {
              "id": "389da47e-067c-4da5-adbe-2aae36e5b303",
              "name": "Produce Records",
              "request": {
                "name": "Produce Records",
                "description": {
                  "content": "[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)\n\nProduce records to the given topic, returning delivery reports for each\nrecord produced. This API can be used in streaming mode by setting\n\"Transfer-Encoding: chunked\" header. For as long as the connection is\nkept open, the server will keep accepting records. Records are streamed\nto and from the server as Concatenated JSON. For each record sent to the\nserver, the server will asynchronously send back a delivery report, in\nthe same order, each with its own error_code. An error_code of 200\nindicates success. The HTTP status code will be HTTP 200 OK as long as\nthe connection is successfully established. To identify records that\nhave encountered an error, check the error_code of each delivery report.\n\nThis API currently does not support Schema Registry integration. Sending\nschemas is not supported. Only BINARY, JSON, and STRING formats are\nsupported.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "kafka",
                    "v3",
                    "clusters",
                    ":cluster_id",
                    "topics",
                    ":topic_name",
                    "records"
                  ],
                  "host": [
                    "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{cluster_id}}",
                      "key": "cluster_id",
                      "description": "(Required) The Kafka cluster ID."
                    },
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{topic_name}}",
                      "key": "topic_name",
                      "description": "(Required) The topic name."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "username",
                      "value": "{{basicAuthUsername}}"
                    },
                    {
                      "key": "password",
                      "value": "{{basicAuthPassword}}"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"partition_id\": \"{{partition_id}}\",\n    \"headers\": [\n        \"{{headers}}\"\n    ],\n    \"key\": {\n        \"type\": \"{{type}}\",\n        \"data\": {}\n    },\n    \"value\": {\n        \"type\": \"{{value.type}}\",\n        \"data\": {}\n    },\n    \"timestamp\": \"{{timestamp}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "b68fa6ff-cd8c-494c-93cc-8c65585cc00c",
                  "name": "The response containing a delivery report for a record produced to a topic. In streaming mode,\nfor each record sent, a separate delivery report will be returned, in the same order,\neach with its own error_code.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 200,\n  \"cluster_id\": \"cluster-1\",\n  \"topic_name\": \"topic-1\",\n  \"partition_id\": 1,\n  \"offset\": 0,\n  \"timestamp\": \"2021-02-05T19:14:42Z\",\n  \"key\": {\n    \"type\": \"BINARY\",\n    \"size\": 7\n  },\n  \"value\": {\n    \"type\": \"JSON\",\n    \"size\": 15\n  }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fc14714b-35ea-4e1d-8635-cda2e4809fc4",
                  "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 400,\n  \"message\": \"Cannot deserialize value of type `byte[]` from String \\\"\\\": Unexpected end of base64-encoded String: base64 variant 'MIME-NO-LINEFEEDS' expects padding (one or more '=' characters) at the end. This Base64Variant might have been incorrectly configured\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "dec0251c-d116-4138-8df0-ff1ae9b19fb8",
                  "name": "Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40101,\n  \"message\": \"Authentication failed\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "97273598-f812-424f-aeb9-7076bbbb38bd",
                  "name": "Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 40301,\n  \"message\": \"Request is not authorized\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "75a73f59-2947-4fbb-8902-075cfe5d61d3",
                  "name": "Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 404,\n  \"message\": \"HTTP 404 Not Found\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d6738d2c-8f3e-4f96-819a-154e01126e47",
                  "name": "This implies the client is sending a request payload that is larger than the maximum message size the server can accept.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Request Entity Too Large",
                  "code": 413,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 413,\n  \"message\": \"The request included a message larger than the maximum message size the server can accept.\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "32c61177-e792-4892-aa39-01ed94a48876",
                  "name": "This implies the client is sending the request payload format in an unsupported format.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Unsupported Media Type",
                  "code": 415,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 415,\n  \"message\": \"HTTP 415 Unsupported Media Type\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "abaa03ee-2560-449c-9748-0fa1e2a5ba8c",
                  "name": "Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Unprocessable Entity (WebDAV) (RFC 4918)",
                  "code": 422,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 422,\n  \"message\": \"Payload error. Request body is empty. Data is required.\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "97fd3a86-403e-4e30-a4a5-653602760cdc",
                  "name": "Indicates that a rate limit threshold has been reached, and the client should retry again later.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "text/html"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Too Many Requests",
                  "code": 429,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/html"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "69871da8-6830-4007-9cf4-4457145f3b8a",
                  "name": "A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "kafka",
                        "v3",
                        "clusters",
                        ":cluster_id",
                        "topics",
                        ":topic_name",
                        "records"
                      ],
                      "host": [
                        "{{kafka-v3-clusters-cluster_id-topics-topic_name-records-Url}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{cluster_id}}",
                          "key": "cluster_id",
                          "description": "(Required) The Kafka cluster ID."
                        },
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{topic_name}}",
                          "key": "topic_name",
                          "description": "(Required) The topic name."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: basic",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"error_code\": 500,\n  \"message\": \"Internal Server Error\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model \n\n\nTest generated for /kafka/v3/clusters/:cluster_id/topics/:topic_name/records for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\n\nconst ld = require('lodash');\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    var parseString = require('xml2js').parseString;\n    parseString(pm.response.body, function (err,result) {\n      if (err) {\n        console.error('Error parsing XML:', err);\n      } else {\n        responseData = result;  \n      }\n    });\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n    pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"The response containing a delivery report for a record produced to a topic. In streaming mode,\nfor each record sent, a separate delivery report will be returned, in the same order,\neach with its own error_code.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"OK\");\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `cluster_id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`cluster_id`)){\n                if(pm.expect(ld.get(pm.response.json(), `cluster_id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `cluster_id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `topic_name` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`topic_name`)){\n                if(pm.expect(ld.get(pm.response.json(), `topic_name`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `topic_name`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `partition_id` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`partition_id`)){\n                if(pm.expect(ld.get(responseData, `partition_id`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `partition_id`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `offset` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`offset`)){\n                if(pm.expect(ld.get(responseData, `offset`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `offset`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `timestamp` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`timestamp`)){\n                if(pm.expect(ld.get(pm.response.json(), `timestamp`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `timestamp`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('timestamp format to be date-time',function(){\n            pm.expect(ld.get(responseData, \"timestamp\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n        })\n\n        pm.test('Response has the `key` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`key`)){\n                if(pm.expect(ld.get(pm.response.json(), `key`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `key`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `key.size` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`key.size`)){\n                if(pm.expect(ld.get(responseData, `key.size`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `key.size`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `key.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`key.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `key.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `key.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `value` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`value`)){\n                if(pm.expect(ld.get(pm.response.json(), `value`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `value`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `value.size` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`value.size`)){\n                if(pm.expect(ld.get(responseData, `value.size`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `value.size`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `value.type` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`value.type`)){\n                if(pm.expect(ld.get(pm.response.json(), `value.type`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `value.type`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Bad Request\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 403){\n    pm.test(\"Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Forbidden\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 404){\n    pm.test(\"Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Not Found\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 413){\n    pm.test(\"This implies the client is sending a request payload that is larger than the maximum message size the server can accept.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Request Entity Too Large\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 415){\n    pm.test(\"This implies the client is sending the request payload format in an unsupported format.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unsupported Media Type\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 422){\n    pm.test(\"Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Unprocessable Entity (WebDAV) (RFC 4918)\");\n        pm.test('Response has the `id` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n                if(pm.expect(ld.get(pm.response.json(), `id`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n  \n        pm.test('id length to be atmost `255`',function(){\n            pm.expect(ld.get(responseData, \"id\", \"\").length).to.be.at.most(255);\n        })\n\n        pm.test('Response has the `status` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n                if(pm.expect(ld.get(pm.response.json(), `status`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `code` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`code`)){\n                if(pm.expect(ld.get(pm.response.json(), `code`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `code`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `title` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`title`)){\n                if(pm.expect(ld.get(pm.response.json(), `title`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `title`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `detail` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`detail`)){\n                if(pm.expect(ld.get(pm.response.json(), `detail`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `detail`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source`)){\n                if(pm.expect(ld.get(pm.response.json(), `source`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source`, null)).to.equal(\"object\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.pointer` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.pointer`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.pointer`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.pointer`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `source.parameter` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`source.parameter`)){\n                if(pm.expect(ld.get(pm.response.json(), `source.parameter`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `source.parameter`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `error_code` field',function(){\n            if(pm.expect(responseData).to.have.nested.property(`error_code`)){\n                if(pm.expect(ld.get(responseData, `error_code`, 200)).to.exist){\n                  pm.expect(typeof ld.get(responseData, `error_code`, 200)).to.equal(\"number\");\n                }\n\n            }\n\n        })\n\n        pm.test('Response has the `message` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`message`)){\n                if(pm.expect(ld.get(pm.response.json(), `message`, null)).to.exist){\n                  pm.expect(typeof ld.get(pm.response.json(), `message`, null)).to.equal(\"string\");\n                }\n\n            }\n\n        })\n\n    });\n\n}\n\nif (pm.response.code == 429){\n    pm.test(\"Indicates that a rate limit threshold has been reached, and the client should retry again later.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Too Many Requests\");\n    });\n\n}\n\nif (pm.response.code == 500){\n    pm.test(\"A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.\", function () {\n        pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");\n    });\n\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://api.confluent.cloud",
      "key": "baseUrl"
    },
    {
      "type": "string",
      "value": "https://pkc-00000.region.provider.confluent.cloud",
      "key": "kafka-v3-clusters-cluster_id-topics-Url"
    },
    {
      "type": "string",
      "value": "https://pkc-00000.region.provider.confluent.cloud",
      "key": "kafka-v3-clusters-cluster_id-topics-topic_name-Url"
    },
    {
      "type": "string",
      "value": "https://pkc-00000.region.provider.confluent.cloud",
      "key": "kafka-v3-clusters-cluster_id-topics-topic_name-partitions-Url"
    },
    {
      "type": "string",
      "value": "https://pkc-00000.region.provider.confluent.cloud",
      "key": "kafka-v3-clusters-cluster_id-topics-topic_name-partitions-partition_id-Url"
    },
    {
      "type": "string",
      "value": "https://pkc-00000.region.provider.confluent.cloud",
      "key": "kafka-v3-clusters-cluster_id-topics-topic_name-records-Url"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "8a35ded7-5c32-4190-8c0c-617bbcb91047",
    "name": "Confluent Cloud APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "# Introduction\n\n<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis documents the collection of Confluent Cloud APIs. Each API documents its\n<a href=\"#section/Versioning/API-Lifecycle-Policy\">lifecycle phase</a>. APIs\nmarked as Early Access or Preview are not ready for production usage. We're currently\nworking with a select group of customers to get feedback and iterate on these APIs.\n</div>\n\nConfluent Cloud APIs are a core building block of Confluent Cloud. You can use the APIs to\nmanage your own account or to integrate Confluent into your product.\n\nMost of the APIs are organized around\n<a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" target=\"_blank\">REST</a>\nand the resources which make up Confluent Cloud. The APIs have predictable\nresource-oriented URLs, transport data using JSON, and use standard HTTP verbs,\nresponse codes, authentication, and design principles.\n\n# Object Model\n\n<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis section describes the object model for many Confluent Cloud APIs, but not all.\nThe Connect v1 API group has a different object model. You can review the example\nrequest and response bodies in <a href=\"#tag/Connectors-(v1)\">Connect v1 API</a>\nto see its object model.\n</div>\n\nConfluent Cloud APIs are primarily designed to be declarative and intent-oriented. In other words, \ntell the API what you want (for example, throughput or SLOs) and it will figure out how to make it happen \n(for example, cluster sizing). A Confluent object acts as a \"record of intent\" — after you create the\nobject, Confluent Cloud will work tirelessly in the background to ensure that the object exists\nas specified.\n\nConfluent APIs represent objects in JSON with media-type `application/json`.\n\nMany objects follow a model consisting of `spec` and `status`. An object's `spec` tells\nConfluent the _desired state_ (specification) of the resource. The object may not be\nimmediately available or changes may not be immediately applied. For this reason,\nmany objects also have a `status` property that provides info about the\n_current state_ of the resource. Confluent Cloud is continuously and actively managing\neach resource's current state to match it's desired state.\n\nAll Confluent objects share a set of common properties:\n\n* **api_version** – API objects have an `api_version` field indicating their API version.\n* **kind** – API objects have a `kind` field indicating the kind of object it is.\n* **id** – Each object in the API will have an identifier, indicated via its `id` field,\n  and should be treated as an opaque string unless otherwise specified.\n\nThere are a number of other [standard properties](#standard-properties) and that you'll encounter\nused by many API objects. And of course, objects have plenty of non-standard fields that are\nspecific to each object _kind_... this is what makes them interesting!\n\n# Authentication\n\nConfluent uses API keys and Java Web Tokens (JWTs) to integrate your applications\nand workflows to your Confluent Cloud resources using the Confluent Cloud REST APIs.\nYour applications and workflows must be authenticated and authorized in order to\naccess and manage Confluent Cloud resources.\n\n## API keys\n\nYou can create and manage your API keys using the Confluent Cloud Console or\nConfluent CLI. For more information, see [Use API Keys to Control Access in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/api-keys/api-keys.html).\n\nConfluent Cloud uses the following two categories of API keys:\n\n* A **Cloud API key** grants access to the Confluent Cloud Management APIs,\n  such as for Provisioning and Metrics integrations.\n* A **resource-specific API key** grants access to a Confluent Kafka cluster\n  (Kafka API key), a Confluent Cloud Schema Registry (Schema Registry API key),\n  or a ksqlDB application.\n\nEach Confluent Cloud API key is associated with a principal (specific user or\nservice account) and inherits the permissions granted to the owner.\n\n* For example, if service account `Armageddon` is granted ACLs on Kafka cluster\n  `neptune`, then a Kafka API Key for `neptune` owned by `Armageddon` will have\n  these ACLs enforced.\n* **Note:** API keys are automatically deleted when the associated user or service\n  account is deleted (for example, when an employee leaves the company or moves to\n  a new department and an SSO integration removes the Confluent Cloud user as they\n  no longer require access).\n* Confluent **strongly recommends** that you use service accounts for all\n  production-critical access.\n\nConfluent Cloud API keys grant access to Confluent Cloud resources, so **keep them secure**!\nDo not share your API keys and secrets in publicly-accessible locations, such as \nGitHub or client-side code.\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail.\nAPI requests without authentication will also fail.\n\nTo use an API key, you must send it in an `Authorization: Basic {credentials}` header.\nRemember that HTTP Basic authentication requires you to provide your credentials as\nthe API key ID and associated API secret separated by a colon and encoded using Base64\nformat. For example, if your API key ID is `ABCDEFGH123456789` and the API key Secret \nis `XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO`, then the authorization header is:\n\n```text​\nAuthorization: Basic QUJDREVGR0gxMjM0NTY3ODk6WE5DSVc5M0kyTDFTUVBKU0o4MjNLMUxTOTAyS0xERk1DWlBXRU8=\n```\n\nYou can generate this header example from the API key:\n\nmacOS:\n\n```shell\n$ echo -n \"ABCDEFGH123456789:XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO\" | base64\n\n```\n\nLinux:\n\n```shell\n$ echo -n \"ABCDEFGH123456789:XNCIW93I2L1SQPJSJ823K1LS902KLDFMCZPWEO\" | base64 -w 0\n```\n\nTo find out if an API operation supports Cloud API Keys, look in the **AUTHORIZATIONS**\nlisting for `cloud-api-key`.\n\nTo find out if an API operation supports resource-specific API Keys, look in the **AUTHORIZATIONS**\nlisting for `resource-api-key`.\n\n## External OAuth\n\nYou can use [OAuth/OIDC support for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html)\nto authenticate and authorize access to applications and workloads for the\nfollowing Confluent Cloud REST APIs:\n\n* **Kafka REST API**: [Kafka REST API for Clusters(V3)](https://docs.confluent.io/cloud/current/api.html#tag/Cluster-(v3)).\n  For an API overview and examples, see [Cluster Management with Kafka REST API](https://docs.confluent.io/cloud/current/kafka-rest/kafka-rest-cc.html).\n* **Schema Registry REST API**: [Schema Registry REST API for Schemas(V1)](https://docs.confluent.io/cloud/current/api.html#tag/Schemas-(v1))\n  and [Subjects](https://docs.confluent.io/cloud/current/api.html#tag/Subjects-(v1)).\n  For an API overview and examples, see [Schema Registry REST API for Confluent Cloud](https://docs.confluent.io/cloud/current/sr/sr-rest-apis.html).\n\nAlternatively, to find out if an API operation supports external tokens, look in the **AUTHORIZATIONS**\nlisting for `external-access-token`.\n\n## Confluent STS tokens\n\nConfluent Security Token Service (STS) issues access tokens (`confluent-sts-access-token`)\nby exchanging an external token (`external-access-token`) for a `confluent-sts-access-token`. You can use\nConfluent STS tokens to authenticate to Confluent Cloud APIs that support the\n`confluent-sts-access-token` notation.\n\nTo find out if an API operation supports Confluent STS tokens, look in the **AUTHORIZATIONS**\nlisting for `confluent-sts-access-token`.\n\n## Partner OAuth\n\nApproved partners can fetch Partner tokens (`confluent-partner-access-token`) that validate their identity\nand grant access to the Partner API (`partner/v2`), which lets them sign up\nan organization on behalf of a customer, manage entitlements (create, read, and list),\nand read or list organizations they have signed up.\n\nTo find out an API operation supports Partner tokens, look in the **AUTHORIZATIONS**\nlisting for `confluent-partner-access-token`.\n\n<!-- TODO: port this back to the Confluent API Design Guide -->\n\n<SecurityDefinitions />\n\n# Errors\n\n<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis section describes the structure of error responses for many Confluent Cloud APIs, but not all.\nThe Connect v1 API group has a different set of structures for error responses. Please review the example\nrequest and response bodies in the Connect v1 API documentation <a href=\"#tag/Connectors-(v1)\">below</a>\nto see its error behaviour.\n</div>\n\nConfluent uses conventional [HTTP status codes](#section/HTTP-Guidelines/Status-Codes) to\nindicate the success or failure of an API request.\n\nFailures follow a standard model to tell you about what went wrong. They may include\none or more error objects with the following fields:\n\n| Field      | Type    | Description\n|------------|---------|--------------------------------------\n| id*        | UUID    | A unique identifier for this particular occurrence of the problem.\n| status     | String  | The HTTP status code applicable to this problem.\n| code       | String  | An application-specific error code.\n| title      | String  | A short, human-readable summary of the problem that **should not** change from occurrence to occurrence of the problem, except for purposes of localization.\n| detail*    | String  | A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n| source     | Object  | An object that references the source of the error, and optionally includes any of the following members:\n| &nbsp;&nbsp;pointer   | String  | A <a href=\"https://tools.ietf.org/html/rfc6901\" target=\"_blank\">JSON Pointer</a> to the associated entity in the request document (e.g. `\"/spec/title\"` for a specific attribute).\n| &nbsp;&nbsp;parameter | String  | A string indicating which URI query parameter caused the error.\n| meta       | Object  | A meta object that contains non-standard meta-information about the error.\n| resolution | String  | Instructions for the end-user for correcting the error.\n\n\\* indicates a required field\n\nAll errors include an `id` and some `detail` message. The `id` is a unique identifier — use it\nwhen you're working with Confluent support to debug a problem with a specific API call. The\n`detail` describes what went wrong.\n\nSome errors that could be handled programmatically (e.g., a Kafka cluster config is invalid)\nmay include an error `code` that briefly explains the error reported.\n\nValidation issues and similar errors include a `source` which tells you exactly\nwhat in the request was responsible for the error.\n\nFor example, a failure may look like\n\n    {\n      \"errors\": [{\n        \"status\": \"422\",\n        \"code\": \"invalid_configuration\",\n        \"id\": \"30ce6058-87da-11e4-b116-123b93f75cba\",\n        \"title\": \"The Kafka cluster configuration is invalid\",\n        \"detail\": \"The property '/cluster/storage_size' of type string did not match the following type: integer\",\n        \"source\": {\n          \"pointer\": \"/cluster/storage_size\"\n        }\n      }]\n    }\n\nIf a request fails validation, it will return an HTTP `422 Unprocessable Entity`\nwith a list of fields that failed validation.\n\n# Pagination\n\n<div class=\"status-info\">\n<p class=\"status-info-title\">Note</p>\nThis section describes the pagination behavior of “list” operations for many Confluent Cloud APIs, but not all.\nThe Connect v1 API list operations do not support pagination.\n</div>\n\nAll API resources have support for bulk reads via \"list\" API operations. For example,\nyou can \"list Kafka clusters\", \"list api keys\", and \"list environments\". These \"list\"\noperations require pagination; by requesting smaller subsets of data, API clients\nreceive a response much faster than requesting the entire, potentially large, data set.\n\nAll \"list\" operations follow the same pattern with the following parameters:\n\n* `page_size` –  client-provided max number of items per page, only valid on the first request.\n* `page_token` –  server-generated token used for traversing through the result set.\n\nA paginated response may include any of the following pagination links. API clients may\nfollow the respective link to page forward or backward through the result set as desired.\n\n| [Link Relation](https://www.iana.org/assignments/link-relations/link-relations.xml) | Description\n|---------|---------------------------------------\n| `next`  | A link to the next page of results. A response that does not contain a next link does not have further data to fetch.\n| `prev`  | A link to the previous page of results. A response that does not contain a prev link has no previous data. This link is **optional** for collections that cannot be traversed backward.\n| `first` | A link to the first page of results. This link is **optional** for collections that cannot be indexed directly to a given page.\n| `last`  | A link to the last page of results. This link is **optional** for collections that cannot be indexed directly to a given page.\n\nAPI clients must treat pagination links and the `page_token` parameter in particular as an opaque string. \n\nAn example paginated list response may look like\n```\n{\n    \"api_version\": \"v2\",\n    \"kind\": \"KafkaClusterList\",\n    \"metadata\": {\n        \"next\": \"https://api.confluent.cloud/kafka-clusters?page_token=ABCDEFGHIJKLMNOP1234567890\"\n    }\n    \"data\": [\n        {\n            \"metadata\": {\n                \"id\": \"lkc-abc123\",\n                \"self\": \"https://api.confluent.cloud/kafka-clusters/lkc-abc123\",\n                \"resource_name\": \"crn://confluent.cloud/kafka=lkc-abc123\",\n            }\n            \"spec\": {\n                \"display_name\": \"My Kafka Cluster\",\n                <snip>\n            },\n            \"status\": {\n                \"phase\": \"RUNNING\",\n                <snip>\n            }\n        },\n        <snip>\n    ]\n}\n```\n\n# Rate Limiting\n\nTo protect the stability of the API and keep it available to all users, Confluent employs\nmultiple safeguards. If you send too many requests in quick succession or perform too many\nconcurrent operations, you may be throttled or have your request rejected with an error.\n\nWhen a rate limit is breached, an HTTP `429 Too Many Requests` error is\nreturned. The following headers are sent back to provide assistance in dealing\nwith rate limits. Note that headers are not returned for a `429` error response with \n[Kafka REST API (v3)](https://docs.confluent.io/cloud/current/api.html#tag/Cluster-(v3)).\n\n| Header                  | Description\n|-------------------------|----------------------------------------\n| `X-RateLimit-Limit`     | The maximum number of requests you're permitted to make per time period.\n| `X-RateLimit-Reset`     | The relative time in seconds until the current rate limit window resets.\n| `Retry-After`           | The number of seconds to wait until the rate limit window resets. Only sent when the rate limit is reached.\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate-limit window. **Important:** This differs from Github and Twitter\\'s same-named header which uses UTC epoch seconds. We use relative time to avoid client/server time synchronization issues.\n\n\nConfluent enforces multiple kinds of limits, including request-rate and concurrency limits, both per user and organization-wide. Unauthenticated requests are associated with the originating IP address, not the user making requests.\n\n\nIntegrations should gracefully handle these limits by watching for `429` error responses and\nbuilding in a retry mechanism. This mechanism should follow a capped exponential backoff policy to\nprevent [retry amplification](https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/)\n(\"retry storms\") and also introduce some randomness (\"jitter\") to avoid the\n[thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\n\nIf you’re running into this error and think you need a higher rate limit, contact Confluent at\n[support@confluent.io](mailto:support@confluent.io).\n\n# Identifiers and URLs\n\nMost resources have multiple identifiers:\n* `id` is the \"natural identifier\" for an object. It is only unique within its parent resource.\n  The `id` is unique across time: the ID will not be reclaimed and reused after an object is deleted.\n* `resource_name` is a Uniform Resource Identifier (URI) that is globally unique across all resources.\n  This encompasses all parent resource `kind`s and `id`s necessary to uniquely identify a particular\n  instance of this object `kind`. Because it uses object `id`s, the CRN will not be reclaimed and\n  reused after an object is deleted. It is represented as a Confluent Resource Name (see below). \n* `self` is a Uniform Resource Locator (URL) at which an object can be addressed.\n  This URL encodes the service location, API version, and other particulars necessary to\n  locate the resource at a point in time.\n\nTo see how these relate to each other, consider `KafkaBroker` with `broker.id=2` in a `KafkaCluster`\nin Confluent Cloud identified as `lkc-xsi8201`. In such an example, the `KafkaBroker` has `id=2`,\nthe `resource_name` is `crn://confluent.cloud/kafka=lkc-xsi8201/broker=2` and the `self` URL may be\nsomething like `https://pkc-8wlk2n.us-west-2.aws.confluent.cloud`. Note that different identifiers\ncarry different information for different purposes, but the `resource_name` is the most complete\nand canonical identifier.\n\n## Confluent Resource Names (CRNs)\n\n*Confluent Resource Names* (CRNs) are used to uniquely identify all Confluent resources.\n\nA CRN is a valid URI having an \"authority\" of `confluent.cloud` or a self-managed\n<a href=\"https://docs.confluent.io/current/security/rbac/configure-mds/index.html\" target=\"_blank\">\nmetadata service URL</a>, followed by the minimal hierarchical set of key-value\npairs necessary to uniquely identify a resource.\n\nHere are some examples for basic resources in Confluent Cloud:\n\n| Resource                   | Example CRN                                                                                                                                                              |\n|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Organization               | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a                                                                                                  |\n| Environment                | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy                                                                            |\n| User                       | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-rst9876                                                                                   |\n| API Key                    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/user=u-zyx98/api-key=ABCDEFG9876543210                                                           |\n| Service Account            | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/service-account=sa-abc1234                                                                       |\n| Kafka Cluster              | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc                                  |\n| Kafka Topic                | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc/topic=my_kafka_topic             |\n| Consumer Group             | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/cloud-cluster=lkc-123abc/kafka=lkc-123abc/group=confluent_cli_consumer_123 |\n| Network                    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc                                                           |\n| Peering                    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/peering=p-123abc                                          |\n| Private Link Access        | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/private-link-access=pla-123abc                            |\n| Transit Gateway Attachment | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/network=n-123abc/transit-gateway-attachment=tgwa-123abc                    |\n| Schema Registry Cluster    | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/schema-registry=lsrc-789qw                                                 |\n| Schema Subject             | crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-456xy/schema-registry=lsrc-789qw/subject=test                                    |\n\n# Data Types\n\n## Primitive Types\n\n| Data Type  | Representation\n|------------|---------------------\n| Integers   | Each API may specify the type as `int32` or `int64`. Note that many languages, including JavaScript, are limited to a max size of approx `2**53` and don't correctly handle large `int64` values with their default JSON parser.\n| Dates      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed, unless otherwise given.\n| Times      | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed, unless otherwise given.\n| Durations  | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> formatted string.\n| Periods    | <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> formatted string. UTC timezones are assumed, unless otherwise given.\n| Ranges     | All ranges are represented using half-open intervals with naming conventions like `[start_XXX, end_XXX)` such as `[start_time, end_time)`.\n| Enums      | Most APIs use <a href=\"https://opensource.zalando.com/restful-api-guidelines/#112\" target=\"_blank\">`x-extensible-enum`</a> as an open-ended list of values. This improves compatibility compared with a standard `enum` which by definition represents a closed set. All enums have a `0`-valued entry which either serves as the default for common cases, or represents `UNSPECIFIED` when no default exists and results in an error.\n\n<!-- TODO\n### Standard Objects\n\n| Money Object | https://schema.org/MonetaryAmount or https://opensource.zalando.com/restful-api-guidelines/#173\n| Price Specification | https://schema.org/PriceSpecification -> https://schema.org/UnitPriceSpecification and https://schema.org/PaymentChargeSpecification\n-->\n\n### Standard Properties\n\nConfluent uses this set of standard properties to ensure common concepts use\nthe same name and semantics across different APIs.\n\n| Name             | Description\n|------------------|------------------------------------------\n| **api_version**  | Many API objects have an `api_version` field indicating their API version. See the [Object Model](#section/Object-Model).\n| **kind**         | Many API objects have a `kind` field indicating the kind of object it is. See the [Object Model](#section/Object-Model).\n| **id**           | Many objects in the API will have an identifier, indicated via its `id` field, and should be treated as an opaque string unless otherwise specified. See the [Object Model](#section/Object-Model).\n| **name**         | Objects which support a client-provided unique identifier instead of a generated `id` will indicate this identifier via its `name` field.\n| **display_name** | The human-readable display name of an API object.\n| **title**        | The official name of an API object, such as a company name. It should be treated as the formal version of `display_name`.\n| **description**  | One or more paragraphs of text description of an entity.\n| **created_at**   | The date and time the object was created, represented as a string in <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n| **updated_at**   | The date and time the object was last modified, represented as a string in <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n| **deleted_at**   | If present, the date and time after which the object was/will be deleted, represented as a string in <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" target=\"_blank\">RFC 3339</a> format.\n| **page_token**   | The pagination token in the List request. See [Pagination](#section/Pagination).\n| **page_size**    | The pagination size in the List request. See [Pagination](#section/Pagination).\n| **total_size**   | The total count of items in the list irrespective of pagination. See [Pagination](#section/Pagination).\n| **spec**         | The _desired state_ specification of the resource, as observed by Confluent Cloud.\n| **status**       | The _current state_ of the resource, as observed by Confluent Cloud.\n\n# Versioning\n\nConfluent APIs ensure stability for your integrations by avoiding the introduction\nof breaking changes to customers unexpectedly. Confluent will make non-breaking\nAPI changes without advance notice. Thus, API clients **must**  follow the\n[Compatibility Policy](#section/Versioning/Compatibility-Policy) below to ensure your\ningtegration remains stable. All APIs follow the API Lifecycle Policy described below,\nwhich describes the guarantees API clients can rely on.\n\nBreaking changes will be [widely communicated](#communication) in advance in accordance\nwith the Confluent [Deprecation Policy](#section/Versioning/Deprecation-Policy). Confluent will provide \ntimelines and a migration path for all API changes, where available. Be sure to subscribe\nto one or more [communication channels](#communication) so you don't miss any updates!\n\nOne exception to these guidelines is for critical security issues. Confluent will take any necessary\nactions to mitigate any critical security issue as soon as possible, which may include disabling\nthe vulnerable functionality until a proper solution is available.\n\nDo not consume any Confluent API unless it is documented in the API Reference. All undocumented\nendpoints should be considered private, subject to change without notice, and not covered by any\nagreements.\n\n> Note: The version in the URL (e.g. \"v1\" or \"v2\") is not a \"major version\" in the\n[Semantic Versioning](https://semver.org/) sense. It is a \"generational version\" or \"meta version\", as seen in\nAPIs like <a href=\"https://developer.github.com/v3/versions/\" target=\"_blank\">Github API</a> or the\n<a href=\"https://stripe.com/docs/api/versioning\" target=\"_blank\">Stripe API</a>.\n\n## API Groups\n\nConfluent APIs are divided into API Groups, such as the Cluster Management for Apache Kafka (CMK) API group,\nthe Connect API group, and the Data Catalog API group. Each group has its own set of endpoints and resources,\nas well as its own API group version.\n\nBecause different API groups have different versions, there is no single version for the \"Confluent Cloud API\".\nThe latest version of the Connect API group may be `connect/v1`, while the latest version of the CMK API group\nmay be `cmk/v2`.\n\nWhen a breaking change is introduced into one API group, Confluent will increase the API version for that API group\nonly, leaving the other API groups' versions unchanged. This makes it easier for you to understand whether a given\nbreaking change impacts your usage of the APIs.\n\n## Known Issues\n\nDuring the Early Access and Preview periods, we have a few known issues.\n\n| Issue          | Description                                                                   | Proposed Resolution\n|----------------|-------------------------------------------------------------------------------|-----------------------------------------------------\n| Quota Exceeded | Some \"Quota Exceeded\" errors will be returned as HTTP 400 instead of HTTP 402 | Return 402 consistently for \"Quota Exceeded\" errors \n\n## API Lifecycle Policy\n\nThe following status labels are applicable to APIs, features, and SDK versions, based on\nthe current support status of each:\n\n* **Early Access** – May change at any time. Not recommended for production usage. Not officially supported by\n  Confluent. Intended for user feedback only. Users must be granted explicit access to the API by Confluent.\n* **Preview** – Unlikely to change between Preview and General Availability. Not recommended for production usage.\n  Officially supported by Confluent for non-production usage. Accessible to all users.\n* **Limited Availability (LA)** - Available to key select customers in a subset of regions/providers/networks and recommended for production usage.  \n* **Generally Available (GA)** – Will not change at short notice. Recommended for production usage.\n  Officially supported by Confluent for non-production and production usage.\n* **Deprecated** – Still supported, but no longer under active development. Existing usage will continue to function\n  but migration following the upgrade guide is strongly recommended. New use cases should be built against the new\n  version. Deprecated feature or version will be removed in the future at the announced date.\n* **Sunset** – Removed, and no longer supported or available.\n\nAn API is \"Generally Available\" unless explicitly marked otherwise.\n\n## Compatibility Policy\n\nConfluent Cloud APIs are governed by\n<a href=\"https://docs.confluent.io/cloud/current/clusters/upgrade-policy.html\" target=\"_blank\">\nConfluent Cloud Upgrade Policy</a>, which means that backward incompatible changes and\ndeprecations will be made approximately once per year, and 180 days notice will be provided via email to all\nregistered Confluent Cloud users.\n\n### Backward Compatibility\n\n> _An API version is backward compatible if a program written against the previous version of the API will continue to work the same way, without modification, against this version of the API._\n\nConfluent considers the following changes to be backward compatible:\n\n* Adding new API resources.\n* Adding new optional parameters to existing API requests (e.g., query string).\n* Adding new properties to existing API resources (e.g., request body).\n* Changing the order of properties in existing API responses.\n* Changing the length or format of object IDs or other opaque strings.\n  * Unless otherwise documented, you can safely assume object IDs generated by Confluent will never exceed 255\n    characters, but you should be able to handle IDs of up to that length. If you're using MySQL,\n    for example, you should store IDs in a `VARCHAR(255) COLLATE utf8_bin` column.\n  * This includes adding or removing fixed prefixes (such as `lkc-` on Kafka cluster IDs).\n  * This includes API keys, API tokens, and similar authentication mechanisms.\n  * This includes all strings described as \"opaque\" in the docs, such as pagination cursors.\n* Adding new API event types.\n* Adding new properties to existing API event types.\n* Omitting properties with null values from existing API responses.\n\n### Forward Compatibility\n\n> _An API version is forward compatible if a program written against the next version of the API\n> will continue to work the same way, without modification, against this version of the API._\n\nIn other words, a forward compatible API will accept input intended for a later version of itself.\n\nConfluent does not guarantee the forward compatibility of the APIs, but Confluent does generally follow the guidelines\ngiven by the [Robustness principle](https://en.wikipedia.org/wiki/Robustness_principle).\nThis means that the API determines what to do with a request based only on the parts that it recognizes.\n\nThis is often referred to as the MUST IGNORE rule.\n\n* Request parameters that are not recognized will be ignored (e.g., query string).\n* Request properties that are not recognized will be ignored (e.g., request body).\n* Request metadata that are not recognized will be ignored (e.g., request headers).\n\nAPI clients must also follow the MUST IGNORE rule.\n\n* Response properties that are not recognized must be ignored (e.g., response body).\n* Response metadata that are not recognized must be ignored (e.g., response headers).\n\nAdditionally, there is a more subtle related rule called the MUST FORWARD rule. Any parts of\na request that an API doesn't recognize must be forwarded unchanged.\n\n* Response properties that are not recognized must be included in any input subsequent updates (e.g., request body)\n  * This includes future `PUT` requests in a read/modify/write operation.\n    (This isn't required for `PATCH` partial updates, which is why Confluent APIs use `PATCH`.)\n* Event processors must not strip unknown properties before forwarding messages.\n\n### Client Responsibilities\n\n* Resource and rate limits, and the default and maximum sizes of paginated data **are not**\n  considered part of the API contract and may change (possibly dynamically). It is the client's\n  responsibility to read the road signs and obey the speed limit.\n* If a property has a primitive type and the API documentation does not explicitly limit its\n  possible values, clients **must not** assume the values are constrained to a particular set\n  of possible responses.\n* If a property of an object is not explicitly declared as mandatory in the API, clients\n  **must not** assume it will be present.\n* A resource **may** be modified to return a \"redirection\" response (e.g. `301`, `307`) instead of\n  directly returning the resource. Clients **must** handle HTTP-level redirects, and respect HTTP\n  headers (e.g. `Location`).\n\n## Deprecation Policy\n\nConfluent will announce deprecations at least 180 days in advance of a breaking change\nand will continue to maintain the deprecated APIs in their original form during this time.\n\nExceptions to this policy apply in case of critical security vulnerabilities or functional defects.\n\n### Communication\n\nWhen a deprecation is announced, the details and any relevant migration\ninformation will be available on one or more of the following channels:\n\n* Announcements on the <a href=\"https://www.confluent.io/blog/\" target=\"_blank\">Developer Blog</a>,\n  <a href=\"https://confluentcommunity.slack.com\" target=\"_blank\">Community Slack</a>\n  (<a href=\"https://slackpass.io/confluentcommunity\" target=\"_blank\">join!</a>),\n  <a href=\"https://groups.google.com/forum/#!forum/confluent-platform\" target=\"_blank\">Google Group</a>,\n  the <a href=\"https://twitter.com/ConfluentInc\" target=\"_blank\">@ConfluentInc twitter</a>\n  account, and similar channels\n* Enterprise customers may receive information by email to their specified Confluent contact, if applicable.\n\n<!-- TODO:\n### Discoverability\n-->\n\n# HTTP Guidelines\n\n## Status Codes\n\nConfluent respects the meanings and behavior of HTTP status codes as defined\nin <a href=\"https://tools.ietf.org/html/rfc2616\">RFC2616</a> and elsewhere.\n\n* Codes in the `2xx` range indicate success\n* Codes in the `3xx` range indicate redirection\n* Codes in the `4xx` range indicate an error caused by the client request\n  (e.g., a required parameter was omitted, an invalid cluster configuration was provided, etc.)\n* Codes in the `5xx` range indicate an error with Confluent's servers (these are rare)\n\nThe various HTTP status codes that might be returned are listed below.\n\n| Code | Title                  | Description\n|------|------------------------|--------------------------------\n| 200  | OK                     | Everything worked as expected.\n| 201  | Created                | The resource was created. Follow the `Location` header.\n| 204  | No Content             | Everything worked and there is no content to return.\n| 400  | Bad Request\t        | The request was unacceptable, often due to malformed syntax, or a missing or malformed parameter.\n| 401  | Unauthorized           | No valid credentials provided. or the credentials are unsuitable, invalid, or unauthorized.\n| 402  | Over Quota             | The request was valid, but you've exceeded your plan quota or limits.\n| 404  | Not Found              | The requested resource doesn't exist or you're unauthorized to know it exists.\n| 409  | Conflict               | The request conflicts with another request (perhaps it already exists or was based on a stale version of data).\n| 422  | Validation Failed      | The request was parsed correctly but failed some sort of validation.\n| 429  | Too Many Requests      | Too many requests hit the API too quickly. Confluent recommends an exponential backoff of your requests.\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Confluent's end. (These are rare.)\n\nThis list is not exhaustive; other standard HTTP error codes may be used,\nincluding `304`, `307`, `308`, `405`, `406`, `408`, `410`, and `415`.\n\nFor more details, see https://httpstatuses.com.\n\n<!--\n\n## Method Overriding\n\nSome firewalls and HTTP clients restrict the use of verbs other than `GET` and `POST`. In those\nenvironments, Confluent API operations that require `PUT`, `PATCH`, and `DELETE` verbs will be inaccessible.\n\nTo avoid this issue, Confluent APIs support the `X-HTTP-Method-Override` header, allowing clients to\n\"tunnel\" `PUT`, `PATCH`, and `DELETE` requests via a `POST` request.\n\nFor example, to call a Confluent `PATCH` resource via a `POST` request, you can\ninclude `X-HTTP-Method-Override: PATCH` as a header.\n\n## User Agent Required\n\nConfluent API requests **should** include a valid `User-Agent` header. Requests with no `User-Agent`\nheader may be rejected. You should use the name of your integration for the `User-Agent`\nheader value and include contact information so that Confluent can contact you if there are problems.\n\n> If your integration is acting as a proxy or gateway, you **should** forward the User-Agent\n> of the originating client with your API requests.\n\nHere's a complete example:\n\n    User-Agent: CoolToolName/1.2.3 (https://example.org/CoolTool/; CoolTool@example.org) UsedBaseLibrary/2.1.0\n\nThe minimum user agent string is the integration name and version: `name/version`.\nYou can string together multiple values in a space-separated list. The full syntax is:\n\n    name/version [(comments)] [name/version [(comments)]] [...]​\n\nFor the integration name, use a string (without whitespace) that clearly and meaningfully\nidentifies your integration.\n\n* Avoid ambiguous names: `Confluent-Integration`, `Kafka-Sink`\n* Use clear and meaningful names: `ABCTools-ToolName`, `StackStorm-Confluent-Plugin`\n\nFor the version, use a semantic version, build ID, commit hash, or other identifier\nthat is updated automatically when you release a new version.\n\nWrap comments in parentheses `()` as a semi-colon separated list. Helpful comments to include:\n\n* A public URL for your integration, such as a GitHub link or a page in your\n  docs site that describes the integration.\n* Contact information so that Confluent can easily reach the integration publisher. This\n  information from the user agent string will never be shared nor used by Confluent for\n  any purpose other than discussing the integration with its publisher.\n\nIf you provide an invalid `User-Agent` header, you may receive a `403 Forbidden` response.\n\n-->\n\n# Metrics APIs\n\nFor Metrics APIs, see <a href=\"https://api.telemetry.confluent.cloud/docs\">Confluent Cloud Metrics API</a>.\n\n\nContact Support:\n Name: Confluent Cloud\n Email: support@confluent.io",
      "type": "text/plain"
    }
  }
}